#include <Arduino.h>
#include <Encoder_Motor.h>
#include <PID.h>
#include <util/atomic.h>
#include "DualG2HighPowerMotorShield.h"
#include <NewPing.h>

DualG2HighPowerMotorShield24v14 md;

const int trigPinFront = 26; // Ultrasonic sensor trigger pin
const int echoPinFront = 27; // Ultrasonic sensor echo pin
// const int trigPinFront = 26; // Ultrasonic sensor trigger pin
// const int echoPinFront = 27; // Ultrasonic sensor echo pin

NewPing sonarFront(trigPinFront, echoPinFront, 200); // NewPing object with a maximum distance of 200 inches

const int leftSensorPin = A5;
const int rightSensorPin = A6;



// Define threshold values for line following
const int thresholdLeft = 450;   // Adjust this value based on your setup
const int thresholdRight = 450;  // Adjust this value based on your setup

// These are digital inputs for motor encoders
#define ENCA_M1 2
#define ENCB_M1 14
#define ENCA_M2 3
#define ENCB_M2 15

// intiallize the two encoders and PID controllers store in array 
Encoder encoder1(ENCA_M1, ENCB_M1);
Encoder encoder2(ENCA_M2, ENCB_M2);
//Encoder enc_array [2] = {encoder1, encoder2}; 
PID PIDcontroller1;
PID PIDcontroller2;

// Intialize variables
int prev_time = 0; 
float actual_speed1 = 0;
float actual_speed2 = 0;




// const int M1DIR=25;
// //const int IN2=24;
// const int M1PWM=8;

// const int M2DIR=23;
// //const int IN4=22;
// const int M2PWM=7;

// void stopIfFault()
// {
//   if (md.getM1Fault())
//   {
//     md.disableDrivers();
//   delay(1);
//     Serial.println("M1 fault");
//     while (1);
//   }
//   if (md.getM2Fault())
//   {
//     md.disableDrivers();
//   delay(1);
//     Serial.println("M2 fault");
//     while (1);
//   }
// }


void setup() {
 
  // put your setup code here, to run once:
 Serial.begin(9600);

 // Setup PID Controller parameters
 PIDcontroller1.setParameters(0.1, 0.01, 0.01);  // Adjust the gains as needed
 PIDcontroller2.setParameters(0.1, 0.01, 0.01);  // Adjust the gains as needed

 // Attach interrupts == Once a high ENCA is read pulse counting begins
 attachInterrupt(digitalPinToInterrupt(ENCA_M1), readEncoder1, RISING);
 attachInterrupt(digitalPinToInterrupt(ENCA_M2), readEncoder2, RISING);

  Serial.begin(9600);
  Serial.println("Dual G2 High Power Motor Shield");
  md.init();
  md.calibrateCurrentOffsets();

  delay(10);

  // Uncomment to flip a motor's direction:
  //md.flipM1(true);
  //md.flipM2(true);

}

void loop() {
  delay(50); // Small delay for stability

  //int distanceFront = sonarFront.ping_in();
  //distanceFront = sonarFront.ping_in();

  int leftSensorValue = analogRead(leftSensorPin);
  int rightSensorValue = analogRead(rightSensorPin);

  float current_time = millis();
  float dt = current_time - prev_time;

  int target_speed1 = 255;
  int target_speed2 = -target_speed1;
  int pos[2];

  ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    pos[0] = encoder1.getPosition();
    pos[1] = encoder2.getPosition();
  }

  md.enableDrivers();
  delay(1);

  move32in(pos, target_speed1);
  encoder1.clrEncoder();
  encoder2.clrEncoder();

  delay (10); 

  turn180Clockwise(pos, target_speed2);
  encoder1.clrEncoder();
  encoder2.clrEncoder();

  delay (10); 

  moveBackward(pos);
  encoder1.clrEncoder();
  encoder2.clrEncoder();

  delay(10);

  turn90CounterClockwise(pos);
  int distanceFront = sonarFront.ping_in();
  distanceFront = sonarFront.ping_in();
  encoder1.clrEncoder();
  encoder2.clrEncoder();

  delay(10);

  function6(distanceFront); // moves 3in from wall

  delay (10); 

  encoder1.clrEncoder(); // clears encoders pos 
  encoder2.clrEncoder(); // clears encoder pos
  turn90CounterClockwise(pos); 
  delay (10); 

  function8(distanceFront); // move 4in from wall
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay (10);
 
  turn45Clockwise(pos); // turns 45 degrees clockwise
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay (10);

  turn90CounterClockwise(pos); // turns 90 degrees counterclockwise
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  turn45Clockwise(pos); // turns 45 degrees counterclockwise
  delay(10);

  function12(distanceFront); 
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  turn90CounterClockwise(pos); 
  delay(10);

  function13(distanceFront); 
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  turn90Clockwise(pos);
  delay(10);

  function14(distanceFront); 
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  turn190Clockwise(pos, target_speed2);
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  move32in(pos, target_speed1);
  encoder1.clrEncoder(); // clears encoder pos 
  encoder2.clrEncoder(); // clears encoder pos
  delay(10);

  turn180Clockwise(pos,target_speed2);
  


  Serial.print("done");


  delay(100000);
  
}

void move32in(int pos[], int target_speed) {
  int i = 25;
  while (pos[0] < 7100 && pos[1] < 7100) {
    md.setM1Speed(i);
    md.setM2Speed(i);

    i < 400 ? i += 25 : i = 400;

    delay(100);

    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void turn180Clockwise(int pos[], int target_speed) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -3300) {
    
    md.setM1Speed(-200);
    md.setM2Speed(200);

    delay(100);


    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void turn190Clockwise(int pos[], int target_speed) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -3450) {
    
    md.setM1Speed(-200);
    md.setM2Speed(200);

    delay(100);


    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void moveBackward(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -5000) {
    md.setM1Speed(-300);
    md.setM2Speed(-300);

    delay(100);

    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}



void turn90CounterClockwise(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[0] > -1550) {
    
    md.setM1Speed(200);
    md.setM2Speed(-200);

    delay(100);

    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}



void function6(int &distanceFront) {
  while (distanceFront > 6) {
    distanceFront = sonarFront.ping_in();
    md.setM1Speed(250);
    md.setM2Speed(250);
    Serial.print("Front Distance: ");
    Serial.print(distanceFront);
    Serial.println(" inches");
    delay(50);  // Add a small delay between sensor readings
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}



void function8(int &distanceFront) {
  while (distanceFront > 4) {
    distanceFront = sonarFront.ping_in();
    md.setM1Speed(250);
    md.setM2Speed(250);
    Serial.print("Front Distance: ");
    Serial.print(distanceFront);
    Serial.println(" inches");
    delay(50);  // Add a small delay between sensor readings
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void turn45Clockwise(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -750) {
    
    md.setM1Speed(-200);
    md.setM2Speed(200);

    delay(100);



    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}



void turn45CounterClockwise(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  Serial.print("Start Funtion 11");
  Serial.print("Motor 1 Position: ");
  Serial.print(pos[0]);
  while (pos[0] > -770) {
    
    md.setM1Speed(200);
    md.setM2Speed(-200);

    delay(100);

    pos[0] = encoder1.getPosition();
    pos[1] = encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void turn90Clockwise(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -1500) {
    
    md.setM1Speed(-200);
    md.setM2Speed(200);

    delay(100);



    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void turn90Clockwise1(int pos[]) {
  pos[0] = encoder1.getPosition();
  pos[1] = encoder2.getPosition();
  while (pos[1] > -1500) {
    
    md.setM1Speed(-200);
    md.setM2Speed(200);

    delay(100);



    pos[0] = encoder1.getPosition();
    pos[1] = -encoder2.getPosition();

    Serial.print("Motor 1 Position: ");
    Serial.print(pos[0]);

    Serial.print("\t");

    Serial.print("Motor 2 Position: ");
    Serial.println(pos[1]);
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void function12(int &distanceFront) {
  while (distanceFront < 8) {
    distanceFront = sonarFront.ping_in();
    md.setM1Speed(-200);
    md.setM2Speed(-200);
    Serial.print("Front Distance: ");
    Serial.print(distanceFront);
    Serial.println(" inches");
    delay(25);  // Add a small delay between sensor readings
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void function13(int &distanceFront) {
  while (distanceFront > 6) {
    distanceFront = sonarFront.ping_in();
    md.setM1Speed(300);
    md.setM2Speed(300);
    Serial.print("Front Distance: ");
    Serial.print(distanceFront);
    Serial.println(" inches");
    delay(50);  // Add a small delay between sensor readings
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}

void function14(int &distanceFront) {
  while (distanceFront > 6) {
    distanceFront = sonarFront.ping_in();
    md.setM1Speed(300);
    md.setM2Speed(300);
    Serial.print("Front Distance: ");
    Serial.print(distanceFront);
    Serial.println(" inches");
    delay(50);  // Add a small delay between sensor readings
  }
  md.setM1Speed(0);
  md.setM2Speed(0);
  delay(500);
}
void readEncoder1() {
  encoder1.readEncoder();
}

void readEncoder2() {
 encoder2.readEncoder();
}
